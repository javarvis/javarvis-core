/**
 * Based on Apache commons EL parser.
 * Original authors Nathan Abramson & Shawn Bayern
 * Modified by itineric
 */

options
{
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  STATIC = false;
}

PARSER_BEGIN(CommandParser)

package com.itineric.javarvis.core.automation.commandanalysis.parser;

import java.util.ArrayList;
import java.util.List;

import com.itineric.javarvis.core.automation.commandanalysis.AndOperator;
import com.itineric.javarvis.core.automation.commandanalysis.ArraySuffix;
import com.itineric.javarvis.core.automation.commandanalysis.AssignExpression;
import com.itineric.javarvis.core.automation.commandanalysis.BinaryOperator;
import com.itineric.javarvis.core.automation.commandanalysis.BinaryOperatorExpression;
import com.itineric.javarvis.core.automation.commandanalysis.BooleanLiteral;
import com.itineric.javarvis.core.automation.commandanalysis.ComplexValue;
import com.itineric.javarvis.core.automation.commandanalysis.ConditionalExpression;
import com.itineric.javarvis.core.automation.commandanalysis.DivideOperator;
import com.itineric.javarvis.core.automation.commandanalysis.EmptyOperator;
import com.itineric.javarvis.core.automation.commandanalysis.EqualsOperator;
import com.itineric.javarvis.core.automation.commandanalysis.Expression;
import com.itineric.javarvis.core.automation.commandanalysis.FloatingPointLiteral;
import com.itineric.javarvis.core.automation.commandanalysis.GreaterThanOperator;
import com.itineric.javarvis.core.automation.commandanalysis.GreaterThanOrEqualsOperator;
import com.itineric.javarvis.core.automation.commandanalysis.IntegerLiteral;
import com.itineric.javarvis.core.automation.commandanalysis.LessThanOperator;
import com.itineric.javarvis.core.automation.commandanalysis.LessThanOrEqualsOperator;
import com.itineric.javarvis.core.automation.commandanalysis.Literal;
import com.itineric.javarvis.core.automation.commandanalysis.MethodCall;
import com.itineric.javarvis.core.automation.commandanalysis.MinusOperator;
import com.itineric.javarvis.core.automation.commandanalysis.ModulusOperator;
import com.itineric.javarvis.core.automation.commandanalysis.MultiplyOperator;
import com.itineric.javarvis.core.automation.commandanalysis.NamedValue;
import com.itineric.javarvis.core.automation.commandanalysis.NotEqualsOperator;
import com.itineric.javarvis.core.automation.commandanalysis.NotOperator;
import com.itineric.javarvis.core.automation.commandanalysis.NullLiteral;
import com.itineric.javarvis.core.automation.commandanalysis.OrOperator;
import com.itineric.javarvis.core.automation.commandanalysis.ParameterValue;
import com.itineric.javarvis.core.automation.commandanalysis.PlusOperator;
import com.itineric.javarvis.core.automation.commandanalysis.PropertySuffix;
import com.itineric.javarvis.core.automation.commandanalysis.StringLiteral;
import com.itineric.javarvis.core.automation.commandanalysis.UnaryMinusOperator;
import com.itineric.javarvis.core.automation.commandanalysis.UnaryOperator;
import com.itineric.javarvis.core.automation.commandanalysis.UnaryOperatorExpression;
import com.itineric.javarvis.core.automation.commandanalysis.ValueSuffix;
import com.itineric.javarvis.core.automation.pattern2command.Command;

@SuppressWarnings("all")
public class CommandParser
{

}

PARSER_END(CommandParser)

<DEFAULT> SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<DEFAULT> TOKEN :
{
  < INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      ("\"" ((~["\"","\\"]) | ("\\" ( ["\\","\""] )))* "\"") |
      ("\'" ((~["\'","\\"]) | ("\\" ( ["\\","\'"] )))* "\'")
  >
|
  < BADLY_ESCAPED_STRING_LITERAL:
      ("\"" (~["\"","\\"])* ("\\" ( ~["\\","\""] ))) |
      ("\'" (~["\'","\\"])* ("\\" ( ~["\\","\'"] )))
  >
| < TRUE: "true" >
| < FALSE: "false" >
| < NULL: "null" >
| < DOT: "." >
| < GT1: ">" >
| < GT2: "gt" >
| < LT1: "<" >
| < LT2: "lt" >
| < EQ1: "==" >
| < EQ2: "eq" >
| < LE1: "<=" >
| < LE2: "le" >
| < GE1: ">=" >
| < GE2: "ge" >
| < NE1: "!=" >
| < NE2: "ne" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < COMMA: "," >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < ASSIGN: "=" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < DIVIDE1: "/" >
| < DIVIDE2: "div" >
| < MODULUS1: "%" >
| < MODULUS2: "mod" >
| < NOT1: "not" >
| < NOT2: "!" >
| < AND1: "and" >
| < AND2: "&&" >
| < OR1: "or" >
| < OR2: "||" >
| < EMPTY: "empty" >
| < COND: "?" >
| < CARET: "^" >
| < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
| < ILLEGAL_CHARACTER: (~[]) >
}

List<Command> commands() :
{
  List<Command> commands = new ArrayList<Command>();
  Expression expression;
}
{
  expression = expression()
  {
    commands.add(new Command(expression));
  }
  (
    <SEMICOLON>
    (
      expression = expression()
      {
        commands.add(new Command(expression));
      }
    )?
  )*
  <EOF>
  {
    return commands;
  }
}

Expression expression() :
{
  Expression expression;
  Expression valueExpression;
}
{
  (
    LOOKAHEAD(2)
    expression = value()
    (
      <ASSIGN> valueExpression = expression()
      {
        if (!(expression instanceof NamedValue))
        {
          throw new ParseException("Unexpected assign expression");
        }
        expression = new AssignExpression((NamedValue)expression, valueExpression);
      }
    )?
  |
    expression = orExpression()
  )
  (
    LOOKAHEAD(2)
    expression = conditionalExpression(expression)
  )?
  {
    return expression;
  }
}

Expression orExpression() :
{
  Expression startExpression;
  BinaryOperator operator;
  Expression expression;
  List operators = null;
  List expressions = null;
}
{
  startExpression = andExpression()
  (
    (
      (
        <OR1>
      |
        <OR2>
      )
      {
        operator = OrOperator.SINGLETON;
      }
    )
    expression = andExpression()
    {
	    if (operators == null)
	    {
	      operators = new ArrayList();
	      expressions = new ArrayList();
	    }
	    operators.add(operator);
	    expressions.add(expression);
    }
  )*
  {
    if (operators != null)
    {
      return new BinaryOperatorExpression(startExpression,
                                          operators,
					                                expressions);
    }
    else
    {
      return startExpression;
    }
  }
}

Expression andExpression() :
{
  Expression startExpression;
  BinaryOperator operator;
  Expression expression;
  List operators = null;
  List expressions = null;
}
{
  startExpression = equalityExpression()
  (
    (
      (
        <AND1>
      |
        <AND2>
      )
      {
        operator = AndOperator.SINGLETON;
      }
    )
    expression = equalityExpression()
    {
	    if (operators == null)
	    {
	      operators = new ArrayList();
	      expressions = new ArrayList();
	    }
	    operators.add(operator);
	    expressions.add(expression);
    }
  )*
  {
    if (operators != null)
    {
      return new BinaryOperatorExpression(startExpression,
                                          operators,
					                                expressions);
    }
    else
    {
      return startExpression;
    }
  }
}

Expression equalityExpression() :
{
  Expression startExpression;
  BinaryOperator operator;
  Expression expression;
  List operators = null;
  List expressions = null;
}
{
  startExpression = relationalExpression()
  (
    (
      (
        <EQ1>
      |
        <EQ2>
      )
      {
        operator = EqualsOperator.SINGLETON;
      }
    |
      (
        <NE1>
      |
        <NE2>)
      {
        operator = NotEqualsOperator.SINGLETON;
      }
    )
    expression = relationalExpression()
    {
	    if (operators == null)
	    {
	      operators = new ArrayList();
	      expressions = new ArrayList();
	    }
	    operators.add(operator);
	    expressions.add(expression);
    }
  )*
  {
    if (operators != null)
    {
      return new BinaryOperatorExpression(startExpression,
					                                operators,
					                                expressions);
    }
    else
    {
      return startExpression;
    }
  }
}

Expression relationalExpression () :
{
  Expression startExpression;
  BinaryOperator operator;
  Expression expression;
  List operators = null;
  List expressions = null;
}
{
  startExpression = addExpression ()
  (
    (
      (
        <LT1>
      |
        <LT2>
      )
      {
        operator = LessThanOperator.SINGLETON;
      }
    |
      (
        <GT1>
      |
        <GT2>
      )
      {
        operator = GreaterThanOperator.SINGLETON;
      }
    |
      (
        <GE1>
      |
        <GE2>
      )
      {
        operator = GreaterThanOrEqualsOperator.SINGLETON;
      }
    |
      (
        <LE1>
      |
        <LE2>
      )
      {
        operator = LessThanOrEqualsOperator.SINGLETON;
      }
    )
    expression = addExpression ()
    {
	    if (operators == null)
	    {
	      operators = new ArrayList();
	      expressions = new ArrayList();
	    }
	    operators.add(operator);
	    expressions.add(expression);
    }
  )*
  {
    if (operators != null)
    {
      return new BinaryOperatorExpression(startExpression,
					                                operators,
					                                expressions);
    }
    else
    {
      return startExpression;
    }
  }
}


Expression addExpression () :
{
  Expression startExpression;
  BinaryOperator operator;
  Expression expression;
  List operators = null;
  List expressions = null;
}
{
  startExpression = multiplyExpression()
  (
    (
      <PLUS>
      {
        operator = PlusOperator.SINGLETON;
      }
    |
      <MINUS>
      {
        operator = MinusOperator.SINGLETON;
      }
    )
    expression = multiplyExpression()
    {
	    if (operators == null)
	    {
	      operators = new ArrayList();
	      expressions = new ArrayList();
	    }
	    operators.add(operator);
	    expressions.add(expression);
    }
  )*
  {
    if (operators != null)
    {
      return new BinaryOperatorExpression(startExpression,
					                                operators,
					                                expressions);
    }
    else
    {
      return startExpression;
    }
  }
}

Expression multiplyExpression() :
{
  Expression startExpression;
  BinaryOperator operator;
  Expression expression;
  List operators = null;
  List expressions = null;
}
{
  startExpression = unaryExpression()
  (
    (
      <MULTIPLY>
      {
        operator = MultiplyOperator.SINGLETON;
      }
    |
      (
        <DIVIDE1>
      |
        <DIVIDE2>
      )
      {
        operator = DivideOperator.SINGLETON;
      }
    |
      (
        <MODULUS1>
      |
        <MODULUS2>
      )
      {
        operator = ModulusOperator.SINGLETON;
      }
    )
    expression = unaryExpression()
    {
	    if (operators == null)
	    {
	      operators = new ArrayList();
	      expressions = new ArrayList();
	    }
	    operators.add(operator);
	    expressions.add(expression);
    }
  )*
  {
    if (operators != null)
    {
      return new BinaryOperatorExpression(startExpression,
					                                operators,
					                                expressions);
    }
    else
    {
      return startExpression;
    }
  }
}

Expression conditionalExpression(final Expression condition) :
{
  Expression trueBranch, falseBranch;
}
{
  (
    <COND> trueBranch = expression() <COLON> falseBranch = expression()
  )
  {
    return new ConditionalExpression(condition, trueBranch, falseBranch);
  }
}

Expression unaryExpression() :
{
  Expression expression;
  UnaryOperator singleOperator = null;
  UnaryOperator operator;
  List operators = null;
}
{
  (
    (
      (
        <NOT1>
      |
        <NOT2>
      )
      {
        operator = NotOperator.SINGLETON;
      }
    |
      <MINUS>
      {
        operator = UnaryMinusOperator.SINGLETON;
      }
    |
      <EMPTY>
      {
        operator = EmptyOperator.SINGLETON;
      }
    )
    {
      if (singleOperator == null)
      {
        singleOperator = operator;
      }
      else if (operators == null)
      {
        operators = new ArrayList();
        operators.add(singleOperator);
        operators.add(operator);
      }
      else
      {
       operators.add(operator);
      }
    }
  )*
  expression = value()
  {
    if (operators != null)
    {
      return new UnaryOperatorExpression (null, operators, expression);
    }
    else if (singleOperator != null)
    {
      return new UnaryOperatorExpression (singleOperator, null, expression);
    }
    else
    {
      return expression;
    }
  }
}

Expression value() :
{
  Expression prefix;
  ValueSuffix suffix;
  List suffixes = null;
}
{
  prefix = valuePrefix()
  (
    suffix = valueSuffix()
    {
	    if (suffixes == null)
	    {
	      suffixes = new ArrayList();
	    }
	    suffixes.add(suffix);
    }
  )*
  {
    if (suffixes == null)
    {
      return prefix;
    }
    else
    {
      return new ComplexValue(prefix, suffixes);
    }
  }
}

Expression valuePrefix() :
{
  Expression expression;
}
{
  (
    expression = literal()
  |
    <LPAREN> expression = expression() <RPAREN>
  |
    expression = namedValueOrParameterOrMethodCall()
  )
  {
    return expression;
  }
}

Expression namedValueOrParameterOrMethodCall() :
{
  Expression expression;
}
{
  expression = namedValueOrParameter()
  (
    LOOKAHEAD(2)
    <COLON> expression = methodCall(expression)
  )?
  {
    return expression;
  }
}

Expression namedValueOrParameter() :
{
  Token t;
  String identifier;
}
{
  (
    <CARET> t = <INTEGER_LITERAL>
    {
      return new ParameterValue(t.image);
    }
  |
    identifier = identifier()
    {
      return new NamedValue(identifier);
    }
  )
}

MethodCall methodCall(Expression providerExpression) :
{
  Expression methodExpression;
  List arguments = new ArrayList();
  Expression expression;
}
{
  (
    methodExpression = namedValueOrParameter()
    <LPAREN>
    (
      (
        expression = expression()
        {
          arguments.add(expression);
        }
      )
      (
        <COMMA>
        expression = expression()
        {
          arguments.add(expression);
        }
      )*
    )?
    <RPAREN>
  )
  {
    return new MethodCall(providerExpression, methodExpression, arguments);
  }
}

ValueSuffix valueSuffix() :
{
  ValueSuffix suffix;
}
{
  (
    suffix = propertySuffix()
  |
    suffix = arraySuffix()
  )
  {
    return suffix;
  }
}

PropertySuffix propertySuffix() :
{
  Token t;
  String property;
}
{
  <DOT>
  (
    property = identifier()
  )
  {
    return new PropertySuffix (property);
  }
}

ArraySuffix arraySuffix() :
{
  Expression index;
}
{
  <LBRACKET> index = expression() <RBRACKET>
  {
    return new ArraySuffix(index);
  }
}

Expression literal() :
{
  Expression expression;
}
{
  (
     expression = booleanLiteral()
  |
    expression = integerLiteral()
  |
    expression = floatingPointLiteral()
  |
    expression = stringLiteral()
  |
    expression = nullLiteral()
  )
  {
    return expression;
  }
}

BooleanLiteral booleanLiteral() :
{
}
{
  (
    <TRUE>
    {
      return BooleanLiteral.TRUE;
    }
  |
    <FALSE>
    {
      return BooleanLiteral.FALSE;
    }
  )
}

StringLiteral stringLiteral() :
{
  Token t;
}
{
  t = <STRING_LITERAL>
  {
    return StringLiteral.fromToken(t.image);
  }
}

Expression integerLiteral() :
{
  Token t;
}
{
  t = <INTEGER_LITERAL>
  {
    return new IntegerLiteral(t.image);
  }
}

FloatingPointLiteral floatingPointLiteral() :
{
  Token t;
}
{
  t = <FLOATING_POINT_LITERAL>
  {
    return new FloatingPointLiteral(t.image);
  }
}

NullLiteral nullLiteral() :
{
}
{
  <NULL>
  {
    return NullLiteral.SINGLETON;
  }
}

String identifier() :
{
  Token t;
}
{
  (
   t = <IDENTIFIER>
   )
   {
     return t.image;
   }
}
