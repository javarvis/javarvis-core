
# The hotword (or wakeword) detector, only snowboy available for now, needs JNI lib
javarvis.hotwordDetector.className=com.itineric.javarvis.core.hotword.snowboy.SnowboyDetector

### The Speech To Text provider, best (in french) is Wit
# Wit STT provider (see wit.ai), needs free subscription, see below for configuration 
javarvis.sttProvider.className=com.itineric.javarvis.core.stt.wit.WitSttProvider

# Bing STT provider, needs free subscription on bing, see below for configuration
#javarvis.sttProvider.className=com.itineric.javarvis.core.stt.bing.BingSttProvider

### The Text To Speech provider, best is Bing
# Bing TTS provider, needs free subscription on bing, see below for configuration
javarvis.ttsProvider.className=com.itineric.javarvis.core.tts.bing.BingTtsProvider

# Voice RSS Text To Speech provider, needs an external module, see javarvis-core-tts-voicerss
#javarvis.ttsProvider.className=com.itineric.javarvis.core.tts.voicerss.VoiceRssTtsProvider

### Automation text processors (many can be provided)
# The default provided text processor converts recognized text to one or many commands, 
# see p2c-text-automation.txt for config details
javarvis.automationTextProcessor.classNames=com.itineric.javarvis.core.automation.pattern2command.TextPatternToCommandsAutomationTextProcessor

### Automation providers (many can be provided)
# Automation providers are used for automation in Javarvis.

# A text to speech provider that allows to transform text to speech
javarvis.automationProvider.classNames=com.itineric.javarvis.core.automation.provider.TextToSpeechAutomationProvider

# A KNX automation provider (if your house uses KNX protocol), needs javarvis-core-knx module
#javarvis.automationProvider.classNames=com.itineric.javarvis.core.automation.provider.KnxAutomationProvider

### Snowboy specific config (see snowboy.kitt.ai)
# the common resource for snowboy
snowboy.resource.common.path=bin-conf/snowboy/common.res
# your keyword resource path (your own resource file can be generated on snowboy website)
snowboy.resource.hotword.path=bin-conf/snowboy/jarvis.umdl
# detection parameters, must be customized regarding your microphone and environment
snowboy.detector.sensitivity=0.5
snowboy.detector.audioGain=1

### Audio input configuration
# the keyword that will make javarvis to stop (empty if not voice stoppable), for debug purpose
audio.in.voiceCommand.stopKeyword=stop

# the threshold used to detected silence (ie: how to detect end of command)
# this is an RMS value, there is no default value that works for everybody, the value may change from
# one microphone to another and from one environment to another.
# There is a trace available in class com.itineric.javarvis.core.audio.in.ThreadedLineReader
# this trace prints out the RMS value after the keyword was detected 
audio.in.voiceCommand.silenceThreshold=0.005

# for a silence to be valid (meaning the silence marks the end of a command)
# it must be longer than the following value (unit is ms, so 300 is 0.3s)
# the more the value is greater, the more you can hesitate (search your words) during command dictation
# but this also means that the time before the command is executed will be greater 
audio.in.voiceCommand.silenceIgnoreTime=300

# the time that will be waited for a command instruction to start after the keyword is detected
# if no command (voice) is detected after that time, the keyword will be needed again to start a command 
audio.in.voiceCommand.timeToSpeak=3000

### Wit specific configuration
# The Wit.ai authorization token 
wit.authorizationToken=<your token here>
# true if http request must be chunked (do not change if not sure)
wit.stt.http.chunked=true

### Bing specific configuration
# the subscription key (needed for both STT and TTS)
bing.subscriptionKey=<your key here>

# true if http request must be chunked (do not change if not sure)
bing.stt.http.chunked=true
# the language used to perform the STT
bing.stt.http.language=fr-fr

# the language for TTS
bing.tts.language=fr-FR
# the voice to use (see bing speech recognition doc to have the right format)
bing.tts.voiceName=Microsoft Server Speech Text to Speech Voice (fr-FR, Paul, Apollo)

### VoiceRSS specific configuration
# the authorization token
voiceRss.authorizationToken=<your token here>
# the language (see at VoiceRSS to give the right format)
voiceRss.language=fr-fr

# the configuration file for pattern to command automation
p2c.text.configurationFilePaths=conf/p2c-text-automation.txt

### KNX configuration file (if knx provider is used)
#knx.configurationFileName=conf/knx.properties
